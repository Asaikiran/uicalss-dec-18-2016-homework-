1) what is self ? why do we use it?
=>The self property returns the current window.
The self property is often used in comparisons 
This property is read-only.
Syntax
window.self
Ex:
function myFunction() {
    if (window.top != window.self) {
        document.getElementById("demo").innerHTML = "This window is NOT the topmost window!";
    } else { 
        document.getElementById("demo").innerHTML = "This window is the topmost window!";
    } 
}


2) what are closures?
=>Closures are functions that refer to independent (free) variables
A closure is an inner function that has access to the outer function’s variables—scope chain
The closure has three scope chains: it has access to its own scope (variables defined between its curly brackets), it has access to the outer function’s variables, and it has access to the global variables.
EX:
function makeFunc() {
  var name = "Mozilla";
  function displayName() {
    alert(name);
  }
  return displayName;
}

var myFunc = makeFunc();
myFunc();



3) what is hoisting?
=>Hoisting is JavaScript's default behavior of moving declarations to the top.
a variable can be used before it has been declared.

Example 
x = 5; // Assign 5 to x

elem = document.getElementById("demo"); // Find an element 
elem.innerHTML = x;                     // Display x in the element

var x; // Declare x


4) what are the different events in java script or dom?
=>HTML events are "things" that happen to HTML elements.
When JavaScript is used in HTML pages, JavaScript can "react" on these events
some examples of HTML events:
An HTML web page has finished loading
An HTML input field was changed
An HTML button was clicked

The W3C Document Object Model (DOM) is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of a document


5) how to attach event listener to an elements?
=>The addEventListener() method attaches an event handler to the specified element.

The addEventListener() method attaches an event handler to an element without overwriting existing event handlers.
we can add many event handlers to one element.
we can add many event handlers of the same type to one element, i.e two "click" events.
The addEventListener() method makes it easier to control how the event reacts to bubbling.

Syntax
element.addEventListener(event, function, useCapture);

Example
element.addEventListener("click", myFunction);

function myFunction() {
    alert ("Hello World!");
}





